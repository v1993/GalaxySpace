buildscript {
    repositories {
		mavenCentral()
		maven { url = 'https://maven.minecraftforge.net/' }		
    }
    dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'

//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

version = "1.12.2"
group = "main" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "AllJar"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {	
	mavenLocal()
	maven { url "https://maven.galacticraft.net/repository/legacy/" }	
	maven { url = "https://maven.thiakil.com" }
    maven { url = "https://dvs1.progwml6.com/files/maven" }
    maven { url "https://www.cursemaven.com" }
	mavenCentral()
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'
	
	accessTransformer = file('src/main/resources/META-INF/gcgsac_at.cfg')
	
	  runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

			args '-Dfml.coreMods.load=galaxyspace.core.hooks.GSHooksLoader,starmaker.utils.asm.AssetPlugin'	
            
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

          
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'chaindestruction', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

        }
    }
}


dependencies {

	minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'
	
	//runtimeOnly fileTree('lib')
	compileOnly fileTree('lib')

	
	//compileOnly "dev.galacticraft:galacticraft-legacy:4.0.2.284"
	runtimeOnly "dev.galacticraft:galacticraft-legacy:4.0.2.283"
	runtimeOnly files('lib/jei_1.12.2-4.13.1.220.jar')
}

jar {
    //manifest.attributes('FMLAT': 'gs_at.cfg')
	manifest.attributes('FMLAT': 'gcgsac_at.cfg')
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
jar.finalizedBy('reobfJar')


task gsJar(type: Jar) {
		
	from(zipTree("build/libs/" + archivesBaseName + "-" + version + ".jar")) {
		exclude 'asmodeuscore/**'
		exclude 'assets/asmodeuscore/**'
		exclude 'beyondspace/**'
		exclude 'assets/beyondspace/**'
		exclude 'starmaker/**'
		exclude 'assets/starmaker/**'
		exclude 'spaceambient/**'
		exclude 'assets/spaceambient/**'
	}
	baseName = "GalaxySpace"
	version = "1.12.2"
	archiveName = "${baseName}-${version}.${extension}"
	
	manifest.attributes('FMLAT': 'gcgsac_at.cfg')
	manifest.attributes('FMLCorePlugin': 'galaxyspace.core.hooks.GSHooksLoader')
	manifest.attributes('FMLCorePluginContainsFMLMod': 'true')
}

task smJar(type: Jar) {
		
	from(zipTree("build/libs/" + archivesBaseName + "-" + version + ".jar")) {
		exclude 'asmodeuscore/**'
		exclude 'assets/asmodeuscore/**'
		exclude 'beyondspace/**'
		exclude 'assets/beyondspace/**'
		exclude 'galaxyspace/**'
		exclude 'assets/galaxyspace/**'
		exclude 'spaceambient/**'
		exclude 'assets/spaceambient/**'
	}
	baseName = "StarMaker"
	version = "1.12.2"
	archiveName = "${baseName}-${version}.${extension}"
	
	manifest.attributes('FMLCorePlugin': 'starmaker.utils.asm.AssetPlugin')
	manifest.attributes('FMLCorePluginContainsFMLMod': 'true')
}

task coreJar(type: Jar) {
	
	from(zipTree("build/libs/" + archivesBaseName + "-" + version + ".jar")) {
		exclude 'galaxyspace/**'
		exclude 'assets/galaxyspace/**'
		exclude 'beyondspace/**'
		exclude 'assets/beyondspace/**'
		exclude 'starmaker/**'
		exclude 'assets/starmaker/**'
		exclude 'spaceambient/**'
		exclude 'assets/spaceambient/**'
	}
	
	baseName = "AsmodeusCore"
	version = "1.12.2"
	archiveName = "${baseName}-${version}.${extension}"
	
	manifest.attributes('FMLAT': 'gcgsac_at.cfg')
	//manifest.attributes('FMLCorePlugin': 'asmodeuscore.core.hooklib.minecraft.HookLoader')
	//manifest.attributes('FMLCorePluginContainsFMLMod': 'true')
	
}

task deobfJar(type: Jar) {
	baseName = "AsmodeusCore"
	version = "1.12.2"
	
    from(sourceSets.main.output)
	{
		exclude 'assets/**'
		exclude 'galaxyspace/**'
		exclude 'beyondspace/**'
		exclude 'starmaker/**'
		exclude 'spaceambient/**'
		exclude 'mcmod.info'
		exclude 'methods.bin'
	}
	
	from(sourceSets.main.allSource)
	{
		exclude 'asmodeuscore/core/astronomy/gui/**'
		exclude 'asmodeuscore/core/utils/worldengine/**'
		exclude 'galaxyspace/**'
		exclude 'beyondspace/**'
		exclude 'assets/galaxyspace/**'
		exclude 'assets/beyondspace/**'
		exclude 'starmaker/**'
		exclude 'assets/starmaker/**'
		exclude 'spaceambient/**'
		exclude 'assets/spaceambient/**'
	}
	archiveName = "${baseName}-${version}-dev.${extension}"
	
	//manifest.attributes('FMLAT': 'asmodeuscore_at.cfg')
	//manifest.attributes('FMLCorePlugin': 'asmodeuscore.core.hooklib.minecraft.HookLoader')
	//manifest.attributes('FMLCorePluginContainsFMLMod': 'true')
}

task deobfGSJar(type: Jar) {

	baseName = "GalaxySpace"
	version = "1.12.2"
	
    from(sourceSets.main.output)
	{
		exclude 'assets/**'
		exclude 'asmodeuscore/**'
		exclude 'beyondspace/**'
		exclude 'starmaker/**'
		exclude 'spaceambient/**'
		exclude 'mcmod.info'
	}
	from(sourceSets.main.allSource)
	{
		exclude 'asmodeuscore/**'
		exclude 'beyondspace/**'
		exclude 'starmaker/**'
		exclude 'assets/asmodeuscore/**'
		exclude 'assets/beyondspace/**'
		exclude 'assets/starmaker/**'
		exclude 'spaceambient/**'
		exclude 'assets/spaceambient/**'
	}
	archiveName = "${baseName}-${version}-dev.${extension}"
	
	manifest.attributes('FMLAT': 'gcgsac_at.cfg')
	manifest.attributes('FMLCorePlugin': 'galaxyspace.core.hooks.GSHooksLoader')
	manifest.attributes('FMLCorePluginContainsFMLMod': 'true')
}
